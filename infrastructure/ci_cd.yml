Description: "Create a Docker CI/CD pipeline with CodePipeline, CodeBuild and ECR"

Parameters:

  AppName:
    Description: Choose the name for the app
    Type: String
    Default: fridge-app

  AWSGitHubConnection:
    Description: GitHub AWS connection created previously as it requires manual authentication process
    Type: String
    Default: aws-github-connection

  GitHubOwner:
    Description: The owner of the GitHub repo
    Type: String
    Default: nikodyulger

  GitHubRepo:
    Description: The GitHub repository name
    Type: String
    Default: aws-fridge-app

  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "CodePipeline Settings"
        Parameters:
          - AppName
          - AWSGitHubConnection
      - 
        Label:
          default: "GitHub Settings"
        Parameters:
          - GitHubOwner
          - GitHubRepo
          - BranchName

Resources:

  ECR: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref AppName
      ImageScanningConfiguration: 
        ScanOnPush: true

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-artifactstore-bucket
      VersioningConfiguration:
        Status: Enabled

  CICDPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: ArtifactStoreBucket
    Properties:
      Name: !Sub ${AppName}-cicd-pipeline
      RoleArn: !GetAtt CICDPipelineRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Sub arn:${AWS::Partition}:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${AWSGitHubConnection}
                FullRepositoryId: !Sub ${GitHubOwner}/${GitHubRepo}
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Test-Build
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeTest
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 2
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 3

  CodeTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AppName}-cicd-test
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub ${AppName}/buildspec-test.yml
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CloudWatchLogsGroup
          Status: ENABLED
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      TimeoutInMinutes: 10

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AppName}-cicd-build
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub ${AppName}/buildspec-build.yml
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CloudWatchLogsGroup
          Status: ENABLED
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: ECR_URI
            Value: !GetAtt ECR.RepositoryUri
          - Name: APP_NAME
            Value: !Ref AppName
          - Name: IMAGE_TAG
            Value: latest
      TimeoutInMinutes: 10

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AppName}
      RetentionInDays: 1

  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "DenyUnEncryptedObjectUploads"
            Action:
              - s3:PutObject
            Effect: Deny
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${bucket_name}/*"
              - bucket_name: !Ref ArtifactStoreBucket
            Principal: '*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: 'aws:kms'
          - Sid: "DenyInsecureConnections"
            Action:
              - s3:*
            Effect: Deny
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${bucket_name}/*"
              - bucket_name: !Ref ArtifactStoreBucket
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: false

  CICDPipelineRole:
    Type: AWS::IAM::Role
    Description: Role for CICD CodePipeline 
    Properties:
      RoleName: !Sub ${AppName}-cicd-pipeline-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipeline-CodeBuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: 
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeTest}
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuild}
        - PolicyName: CodePipeline-S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: 
                  - !Sub
                    - "arn:${AWS::Partition}:s3:::${bucket_name}/*"
                    - bucket_name: !Ref ArtifactStoreBucket
        - PolicyName: CodePipeline-S3-List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:List
                Resource: 
                  - !GetAtt ArtifactStoreBucket.Arn
        - PolicyName: CodePipeline-GitHubConnection
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: 
                  - !Sub arn:${AWS::Partition}:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${AWSGitHubConnection}

  CodeBuildRole:
    Type: AWS::IAM::Role
    Description: Role for CICD CodeBuild
    Properties:
      RoleName: !Sub ${AppName}-cicd-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuild-S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: 
                  - !Sub
                    - "arn:${AWS::Partition}:s3:::${bucket_name}/*"
                    - bucket_name: !Ref ArtifactStoreBucket
        - PolicyName: CodeBuild-S3-List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:List
                Resource: 
                  - !GetAtt ArtifactStoreBucket.Arn
        - PolicyName: CodeBuild-CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt CloudWatchLogsGroup.Arn
        - PolicyName: CodeBuild-ECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: 
                  - '*'

Outputs:
  ECRUri:
    Description: ECR Repository URI
    Value: !GetAtt ECR.RepositoryUri
    Export:
      Name: !Sub ecr-${AppName}